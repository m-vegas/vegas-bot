require('dotenv').config();
const { Client, IntentsBitField, ActivityType } = require('discord.js');
const Database = require('./database');
const config = require('./config');
const { handleSellCommand } = require('./commands/sell');
const { handleBidCommand } = require('./commands/bid');
const { handleDeleteCommand } = require('./commands/delete');
const { handleListingsCommand } = require('./commands/listings');
const { handleVerifyCommand } = require('./commands/verify');
const { handleButtonInteraction } = require('./handlers/buttonHandler');
const { handleModalSubmit } = require('./handlers/modalHandler');
const EmbedUtils = require('./utils/embedBuilder');

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Discord
const client = new Client({
  intents: [
    IntentsBitField.Flags.Guilds,
    IntentsBitField.Flags.GuildMessages,
  ],
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const db = new Database();

// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
const OWNER_ID = '448141002692231208';

// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–æ–ª–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞
const VERIFIED_SELLER_ROLE_ID = '1399007658559668275';

// –°–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
client.on('ready', () => {
  console.log(`ü§ñ –ë–æ—Ç ${client.user.tag} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`);
  console.log(`üìä –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ ${client.guilds.cache.size} —Å–µ—Ä–≤–µ—Ä–∞–º`);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
  client.user.setActivity('Vegas+ Market', { type: ActivityType.Watching });

  console.log('üöÄ Vegas+ Market –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
});

// –ö–æ–º–∞–Ω–¥–∞ /ban –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
client.on('messageCreate', async (message) => {
  if (!message.content.startsWith('/ban') || message.author.id !== OWNER_ID) return;

  const targetUser = message.mentions.users.first();
  if (!targetUser) {
    return message.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `/ban @username <–ø—Ä–∏—á–∏–Ω–∞>`');
  }

  const reason = message.content.split(' ').slice(2).join(' ') || '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞';

  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  db.db.run('DELETE FROM listings WHERE user_id = ?', [targetUser.id], (err) => {
    if (err) console.error(err);
  });

  const { EmbedBuilder } = require('discord.js');
  const embed = new EmbedBuilder()
    .setTitle('üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
    .setDescription(`${targetUser.username} –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–∞–≤–∞—Ç—å –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ.`)
    .addFields(
      { name: '–ü—Ä–∏—á–∏–Ω–∞', value: reason },
      { name: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', value: message.author.username }
    )
    .setColor(0xe74c3c)
    .setTimestamp();

  message.reply({ embeds: [embed] });

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  targetUser.send({ 
    embeds: [embed.setTitle('üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ Vegas+ Market')] 
  }).catch(console.error);
});

// –ö–æ–º–∞–Ω–¥–∞ /start_auction –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤
client.on('messageCreate', async (message) => {
  if (!message.content.startsWith('/start_auction') || message.author.bot) return;

  const args = message.content.split(' ');
  if (args.length < 5) {
    const { EmbedBuilder } = require('discord.js');
    const helpEmbed = new EmbedBuilder()
      .setTitle('‚ùì –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /start_auction')
      .setDescription('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/start_auction <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <–Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞> <—à–∞–≥ —Å—Ç–∞–≤–∫–∏> <–æ–ø–∏—Å–∞–Ω–∏–µ> [URL —Ñ–æ—Ç–æ]`')
      .addFields(
        { name: '–ü—Ä–∏–º–µ—Ä', value: '`/start_auction electronics 500$ 50$ –ù–æ–≤—ã–π iPhone 15`' },
        { name: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', value: 'electronics, clothing, services, real-estate, vehicles, other' }
      )
      .setColor(0x3498db);
    return message.reply({ embeds: [helpEmbed] });
  }

  const category = args[1].toLowerCase();
  const startPrice = args[2];
  const bidStep = args[3];
  const description = args.slice(4).join(' ');
  const imageUrl = message.attachments.first()?.url || args.find(arg => arg.startsWith('http'));

  const isVerified = message.member.roles.cache.has(VERIFIED_SELLER_ROLE_ID);

  db.db.run(
    'INSERT INTO listings (user_id, category, title, description, price, image_url, date, is_auction, highest_bid, is_verified, status) VALUES (?, ?, ?, ?, ?, ?, ?, 1, ?, ?, ?)',
    [message.author.id, category, `–ê—É–∫—Ü–∏–æ–Ω –æ—Ç ${message.author.username}`, description, startPrice, imageUrl, new Date().toISOString(), startPrice, isVerified ? 1 : 0, 'active'],
    function (err) {
      if (err) {
        console.error(err);
        return message.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞.');
      }

      const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
      const embed = new EmbedBuilder()
        .setTitle(`üé™ –ê—É–∫—Ü–∏–æ–Ω: ${config.categories[category]} | –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${startPrice}`)
        .setDescription(description)
        .addFields(
          { name: '–®–∞–≥ —Å—Ç–∞–≤–∫–∏', value: bidStep, inline: true },
          { name: '–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞', value: startPrice, inline: true },
          { name: '–ó–∞–≤–µ—Ä—à–∏—Ç—Å—è —á–µ—Ä–µ–∑', value: '24 —á–∞—Å–∞', inline: true }
        )
        .setColor(0xf39c12)
        .setImage(imageUrl || null)
        .setFooter({ 
          text: `–ü—Ä–æ–¥–∞–≤–µ—Ü: ${message.author.username}`, 
          iconURL: message.author.displayAvatarURL() 
        });

      const row = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId(`bid_${this.lastID}`)
          .setLabel('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É')
          .setEmoji(config.emojis.bid)
          .setStyle(ButtonStyle.Primary),
        new ButtonBuilder()
          .setCustomId(`details_${this.lastID}`)
          .setLabel('–ü–æ–¥—Ä–æ–±–Ω–µ–µ')
          .setEmoji('‚ÑπÔ∏è')
          .setStyle(ButtonStyle.Secondary)
      );

      message.reply({ embeds: [embed], components: [row] });

      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
      const auctionId = this.lastID;
      setTimeout(() => {
        db.getListing(auctionId, (err, auction) => {
          if (auction && auction.highest_bidder) {
            const winnerEmbed = new EmbedBuilder()
              .setTitle('üèÜ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!')
              .setDescription(`–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <@${auction.highest_bidder}> —Å–æ —Å—Ç–∞–≤–∫–æ–π ${auction.highest_bid}`)
              .setColor(0x2ecc71);

            message.channel.send({ embeds: [winnerEmbed] });
          }
        });
      }, 86400000); // 24 —á–∞—Å–∞
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥
async function handleSlashSellCommand(interaction, db, client) {
  const category = interaction.options.getString('category');
  const price = interaction.options.getString('price');
  const description = interaction.options.getString('description');
  const imageUrl = interaction.options.getString('image');
  const isAuction = interaction.options.getBoolean('auction') || false;

  const isVerified = interaction.member.roles.cache.has(VERIFIED_SELLER_ROLE_ID);

  db.getUserStats(interaction.user.id, (err, userStats) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
      return interaction.reply({ content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.', flags: 64 });
    }

    const listingData = {
      userId: interaction.user.id,
      category,
      title: `${config.categories[category]} –æ—Ç ${interaction.user.username}`,
      description,
      price,
      imageUrl,
      isAuction,
      isVerified
    };

    db.createListing(listingData, function(err) {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', err);
        return interaction.reply({ content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.', flags: 64 });
      }

      const listingId = this.lastID;

      const listing = {
        id: listingId,
        ...listingData,
        views: 0,
        highest_bid: 0,
        highest_bidder: null,
        date: new Date().toISOString(),
        is_verified: isVerified ? 1 : 0,
        is_auction: isAuction ? 1 : 0
      };

      const embed = EmbedUtils.createListingEmbed(listing, userStats, interaction.user);

      const { ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
      const row = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId(`buy_${listingId}`)
          .setLabel('–ö—É–ø–∏—Ç—å')
          .setEmoji(config.emojis.buy)
          .setStyle(ButtonStyle.Success),
        new ButtonBuilder()
          .setCustomId(`report_${listingId}`)
          .setLabel('–ñ–∞–ª–æ–±–∞')
          .setEmoji(config.emojis.report)
          .setStyle(ButtonStyle.Danger),
        new ButtonBuilder()
          .setCustomId(`details_${listingId}`)
          .setLabel('–ü–æ–¥—Ä–æ–±–Ω–µ–µ')
          .setEmoji(config.emojis.info)
          .setStyle(ButtonStyle.Primary)
      );

      if (isAuction) {
        row.addComponents(
          new ButtonBuilder()
            .setCustomId(`bid_${listingId}`)
            .setLabel('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É')
            .setEmoji(config.emojis.bid)
            .setStyle(ButtonStyle.Secondary)
        );
      }

      interaction.reply({ embeds: [embed], components: [row] });

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–∞–Ω–∞–ª
      const logChannel = client.channels.cache.get(config.logChannelId);
      if (logChannel) {
        const logEmbed = EmbedUtils.createListingEmbed(listing, userStats, interaction.user)
          .setTitle(`üì¢ –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (${config.categories[category]})`);

        // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–ª—å admin –ø–æ –∏–º–µ–Ω–∏
        const adminRole = logChannel.guild.roles.cache.find(role => role.name === config.adminRole);
        const roleId = adminRole ? adminRole.id : null;

        logChannel.send({
          embeds: [logEmbed],
          content: roleId ? `–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ: <@&${roleId}>` : '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'
        });
      }
    });
  });
}

async function handleSlashBidCommand(interaction, db, client) {
  const listingId = interaction.options.getInteger('id');
  const bidAmount = interaction.options.getInteger('amount');

  db.getListing(listingId, (err, listing) => {
    if (err || !listing) {
      return interaction.reply({ content: '‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', flags: 64 });
    }

    if (!listing.is_auction) {
      return interaction.reply({ content: '‚ùå –î–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞—É–∫—Ü–∏–æ–Ω–æ–º.', flags: 64 });
    }

    if (listing.user_id === interaction.user.id) {
      return interaction.reply({ content: '‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.', flags: 64 });
    }

    if (bidAmount <= listing.highest_bid) {
      return interaction.reply({ content: `‚ùå –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π (${listing.highest_bid})!`, flags: 64 });
    }

    db.updateBid(listingId, bidAmount, interaction.user.id, (err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏:', err);
        return interaction.reply({ content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏.', flags: 64 });
      }

      const successEmbed = EmbedUtils.createSuccessEmbed(
        '‚úÖ –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!',
        `–í—ã —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É **${bidAmount}$** –Ω–∞ –ª–æ—Ç #${listingId}`
      );

      interaction.reply({ embeds: [successEmbed], flags: 64 });

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É)
    });
  });
}

async function handleSlashSearchCommand(interaction, db, client) {
  const category = interaction.options.getString('category') || 'all';

  db.searchListings(category === 'all' ? null : category, 5, async (err, listings) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', err);
      return interaction.reply({ content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.', flags: 64 });
    }

    if (!listings || listings.length === 0) {
      const embed = EmbedUtils.createInfoEmbed(
        'üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞',
        '–û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.'
      );
      return interaction.reply({ embeds: [embed], flags: 64 });
    }

    const embed = EmbedUtils.createInfoEmbed(
      'üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞',
      `–ù–∞–π–¥–µ–Ω–æ ${listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`
    );

    for (const listing of listings) {
      const seller = await client.users.fetch(listing.user_id).catch(() => null);
      if (seller) {
        embed.addFields({
          name: `#${listing.id} - ${config.categories[listing.category]} ${listing.price}`,
          value: `**${listing.title}**\n${listing.description.substring(0, 100)}...\n–ü—Ä–æ–¥–∞–≤–µ—Ü: ${seller.username}`,
          inline: false
        });
      }
    }

    interaction.reply({ embeds: [embed], flags: 64 });
  });
}

async function handleSlashStatsCommand(interaction, db, client) {
  const targetUser = interaction.options.getUser('user') || interaction.user;

  db.getUserStats(targetUser.id, (err, stats) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
      return interaction.reply({ content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.', flags: 64 });
    }

    const embed = EmbedUtils.createUserStatsEmbed(targetUser, stats);
    interaction.reply({ embeds: [embed], flags: 64 });
  });
}

async function handleSlashListingsCommand(interaction, db, client) {
  const targetUser = interaction.options.getUser('user') || interaction.user;
  const limit = interaction.options.getInteger('limit') || 5;

  const query = `
    SELECT * FROM listings 
    WHERE user_id = ? AND status = 'active'
    ORDER BY date DESC 
    LIMIT ?
  `;

  db.db.all(query, [targetUser.id, Math.min(limit, 10)], async (err, listings) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', err);
      return interaction.reply({ content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.', flags: 64 });
    }

    if (!listings || listings.length === 0) {
      const embed = EmbedUtils.createInfoEmbed(
        'üìã –û–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        `–£ ${targetUser.username} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π`
      );
      return interaction.reply({ embeds: [embed], flags: 64 });
    }

    db.getUserStats(targetUser.id, async (err, userStats) => {
      const embed = EmbedUtils.createInfoEmbed(
        `üìã –û–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUser.username}`,
        `–ù–∞–π–¥–µ–Ω–æ ${listings.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π`
      )
      .setThumbnail(targetUser.displayAvatarURL());

      for (const listing of listings.slice(0, 5)) {
        const categoryIcon = config.categories[listing.category] || 'üì¶';
        const auctionText = listing.is_auction ? 'üî® –ê—É–∫—Ü–∏–æ–Ω' : '';
        const verifiedText = listing.is_verified ? '‚úÖ' : '';

        embed.addFields({
          name: `${verifiedText} #${listing.id} - ${categoryIcon} ${listing.price} ${auctionText}`,
          value: `${listing.description.substring(0, 80)}...\nüëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${listing.views}`,
          inline: false
        });
      }

      interaction.reply({ embeds: [embed], flags: 64 });
    });
  });
}

async function handleSlashDeleteCommand(interaction, db, client) {
  const listingId = interaction.options.getInteger('id');

  db.getListing(listingId, (err, listing) => {
    if (err || !listing) {
      return interaction.reply({ content: '‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', flags: 64 });
    }

    const isOwner = listing.user_id === interaction.user.id;
    const isAdmin = interaction.member.roles.cache.some(role => role.name === config.adminRole);

    if (!isOwner && !isAdmin) {
      return interaction.reply({ content: '‚ùå –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.', flags: 64 });
    }

    db.db.run('UPDATE listings SET status = ? WHERE id = ?', ['deleted', listingId], function(err) {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', err);
        return interaction.reply({ content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.', flags: 64 });
      }

      const embed = EmbedUtils.createSuccessEmbed(
        '‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ',
        `–û–±—ä—è–≤–ª–µ–Ω–∏–µ #${listingId} –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ`
      );

      interaction.reply({ embeds: [embed], flags: 64 });
    });
  });
}

async function handleSlashVerifyCommand(interaction, db, client) {
  if (interaction.user.id !== OWNER_ID) {
    return interaction.reply({ content: '‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π , –∏ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫—É.', flags: 64 });
  }

  const targetUser = interaction.options.getUser('user');
  const action = interaction.options.getString('action');

  try {
    const member = await interaction.guild.members.fetch(targetUser.id);
    const verifiedRole = interaction.guild.roles.cache.get(VERIFIED_SELLER_ROLE_ID);

    if (!verifiedRole) {
      return interaction.reply({ content: `‚ùå –†–æ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.`, flags: 64 });
    }

    if (action === 'add') {
      await member.roles.add(verifiedRole);
      db.db.run('UPDATE listings SET is_verified = 1 WHERE user_id = ? AND status = "active"', [targetUser.id]);

      const embed = EmbedUtils.createSuccessEmbed(
        '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω',
        `${targetUser.username} –ø–æ–ª—É—á–∏–ª —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞`
      );
      interaction.reply({ embeds: [embed], flags: 64 });
    } else {
      await member.roles.remove(verifiedRole);
      db.db.run('UPDATE listings SET is_verified = 0 WHERE user_id = ? AND status = "active"', [targetUser.id]);

      const embed = EmbedUtils.createInfoEmbed(
        'üì¢ –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–æ–∑–≤–∞–Ω',
        `–£ ${targetUser.username} –æ—Ç–æ–∑–≤–∞–Ω —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞`
      );
      interaction.reply({ embeds: [embed], flags: 64 });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    interaction.reply({ content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.', flags: 64 });
  }
}

async function handleSlashHelpCommand(interaction) {
  const embed = EmbedUtils.createInfoEmbed(
    'üìö –ü–æ–º–æ—â—å –ø–æ Vegas+ Market',
    '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã:'
  )
  .addFields(
    { name: '/sell', value: '–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ', inline: false },
    { name: '/bid', value: '–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –≤ –∞—É–∫—Ü–∏–æ–Ω–µ', inline: false },
    { name: '/search', value: '–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', inline: false },
    { name: '/stats', value: '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', inline: false },
    { name: '/listings', value: '–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', inline: false },
    { name: '/delete', value: '–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (–¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞)', inline: false },
    { name: '/verify', value: '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞ (–¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞)', inline: false },
    { name: '/help', value: '–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ', inline: false }
  )
  .addFields(
    { name: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤', value: Object.entries(config.categories).map(([key, val]) => `‚Ä¢ ${val}`).join('\n'), inline: false }
  );

  interaction.reply({ embeds: [embed], flags: 64 });
}

async function handleSlashBanCommand(interaction, db, client) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
  if (interaction.user.id !== OWNER_ID) {
    return interaction.reply({ content: '‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π , –∏ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫—É.', flags: 64 });
  }

  const targetUser = interaction.options.getUser('user');
  const reason = interaction.options.getString('reason') || '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞';

  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  db.db.run('DELETE FROM listings WHERE user_id = ?', [targetUser.id], (err) => {
    if (err) console.error(err);
  });

  const { EmbedBuilder } = require('discord.js');
  const embed = new EmbedBuilder()
    .setTitle('üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
    .setDescription(`${targetUser.username} –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–∞–≤–∞—Ç—å –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ.`)
    .addFields(
      { name: '–ü—Ä–∏—á–∏–Ω–∞', value: reason },
      { name: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', value: interaction.user.username }
    )
    .setColor(0xe74c3c)
    .setTimestamp();

  interaction.reply({ embeds: [embed] });

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  targetUser.send({ 
    embeds: [embed.setTitle('üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ Vegas+ Market')] 
  }).catch(console.error);
}

async function handleSlashStartAuctionCommand(interaction, db, client) {
  const category = interaction.options.getString('category');
  const startPrice = interaction.options.getString('start_price');
  const bidStep = interaction.options.getString('bid_step');
  const description = interaction.options.getString('description');
  const imageUrl = interaction.options.getString('image');

  const isVerified = interaction.member.roles.cache.has(VERIFIED_SELLER_ROLE_ID);

  db.db.run(
    'INSERT INTO listings (user_id, category, title, description, price, image_url, date, is_auction, highest_bid, is_verified, status, bid_step) VALUES (?, ?, ?, ?, ?, ?, ?, 1, ?, ?, ?, ?)',
    [interaction.user.id, category, `–ê—É–∫—Ü–∏–æ–Ω –æ—Ç ${interaction.user.username}`, description, startPrice, imageUrl, new Date().toISOString(), startPrice, isVerified ? 1 : 0, 'active', bidStep],
    function (err) {
      if (err) {
        console.error(err);
        return interaction.reply({ content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞.', flags: 64 });
      }

      const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
      const embed = new EmbedBuilder()
        .setTitle(`üé™ –ê—É–∫—Ü–∏–æ–Ω: ${config.categories[category]} | –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${startPrice}`)
        .setDescription(description)
        .addFields(
          { name: '–®–∞–≥ —Å—Ç–∞–≤–∫–∏', value: bidStep, inline: true },
          { name: '–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞', value: startPrice, inline: true },
          { name: '–ó–∞–≤–µ—Ä—à–∏—Ç—Å—è —á–µ—Ä–µ–∑', value: '24 —á–∞—Å–∞', inline: true }
        )
        .setColor(0xf39c12)
        .setImage(imageUrl || null)
        .setFooter({ 
          text: `–ü—Ä–æ–¥–∞–≤–µ—Ü: ${interaction.user.username}`, 
          iconURL: interaction.user.displayAvatarURL() 
        });

      const row = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId(`bid_${this.lastID}`)
          .setLabel('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É')
          .setEmoji(config.emojis.bid)
          .setStyle(ButtonStyle.Primary),
        new ButtonBuilder()
          .setCustomId(`details_${this.lastID}`)
          .setLabel('–ü–æ–¥—Ä–æ–±–Ω–µ–µ')
          .setEmoji('‚ÑπÔ∏è')
          .setStyle(ButtonStyle.Secondary)
      );

      interaction.reply({ embeds: [embed], components: [row] });

      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
      const auctionId = this.lastID;
      setTimeout(() => {
        db.getListing(auctionId, (err, auction) => {
          if (auction && auction.highest_bidder) {
            const winnerEmbed = new EmbedBuilder()
              .setTitle('üèÜ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!')
              .setDescription(`–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <@${auction.highest_bidder}> —Å–æ —Å—Ç–∞–≤–∫–æ–π ${auction.highest_bid}`)
              .setColor(0x2ecc71);

            interaction.followUp({ embeds: [winnerEmbed] });
          }
        });
      }, 86400000); // 24 —á–∞—Å–∞
    }
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
client.on('interactionCreate', async (interaction) => {
  try {
    if (interaction.isChatInputCommand()) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥
      switch (interaction.commandName) {
        case 'sell':
          await handleSlashSellCommand(interaction, db, client);
          break;
        case 'bid':
          await handleSlashBidCommand(interaction, db, client);
          break;
        case 'search':
          await handleSlashSearchCommand(interaction, db, client);
          break;
        case 'stats':
          await handleSlashStatsCommand(interaction, db, client);
          break;
        case 'listings':
          await handleSlashListingsCommand(interaction, db, client);
          break;
        case 'delete':
          await handleSlashDeleteCommand(interaction, db, client);
          break;
        case 'verify':
          await handleSlashVerifyCommand(interaction, db, client);
          break;
        case 'help':
          await handleSlashHelpCommand(interaction);
          break;
        case 'ban':
          await handleSlashBanCommand(interaction, db, client);
          break;
        case 'start_auction':
          await handleSlashStartAuctionCommand(interaction, db, client);
          break;
      }
    } else if (interaction.isButton()) {
      await handleButtonInteraction(interaction, db, client);
    } else if (interaction.isModalSubmit()) {
      await handleModalSubmit(interaction, db, client);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:', error);

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º–∏
    if (error.code === 10062 || error.code === 40060) {
      console.log('–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏—Å—Ç–µ–∫–ª–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }

    const errorMessage = { 
      content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.', 
      flags: 64 
    };

    try {
      if (interaction.replied || interaction.deferred) {
        await interaction.followUp(errorMessage);
      } else {
        await interaction.reply(errorMessage);
      }
    } catch (followUpError) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', followUpError.message);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
client.on('error', error => {
  console.error('–û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ Discord:', error);
});

process.on('unhandledRejection', error => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', error);
});

process.on('uncaughtException', error => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  process.exit(1);
});

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
process.on('SIGINT', () => {
  console.log('üì¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  db.close();
  client.destroy();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('üì¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  db.close();
  client.destroy();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
const token = process.env.DISCORD_TOKEN;
if (!token) {
  console.error('‚ùå DISCORD_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  process.exit(1);
}

client.login(token)
  .then(() => {
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Discord API');
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Discord:', error);
    process.exit(1);
  });

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
module.exports = { client, db };